{"version":3,"file":"index.js","mappings":";;;;;;AAAA;;;;;;;;AAAA;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC7BA;AACA;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["../webpack://rewritable-pr-comment/../../../Library/Application Support/fnm/node-versions/v16.18.1/installation/lib/node_modules/@vercel/ncc/dist/ncc/@@notfound.js","../webpack://rewritable-pr-comment/webpack/bootstrap","../webpack://rewritable-pr-comment/webpack/runtime/compat","../webpack://rewritable-pr-comment/./index.js"],"sourcesContent":[null,"// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = __dirname + \"/\";","const core = require('@actions/core');\nconst github = require('@actions/github');\nconst DEFAULT_COMMENT_IDENTIFIER = '4YE2JbpAewMX4rxmRnWyoSXoAfaiZH19QDB2IR3OSJTxmjSu';\nconst ctx = github.context;\n\nasync function checkForExistingComment(octokit, repo, owner, issue_number, commentIdentifier) {\n  const existingComments = await octokit.issues.listComments({\n    repo,\n    owner,\n    issue_number,\n  });\n\n  let existingCommentId = undefined;\n  if (Array.isArray(existingComments.data)) {\n    existingComments.data.forEach(({ body, id }) => {\n      if (body.includes(commentIdentifier)) existingCommentId = id;\n    });\n  }\n  return existingCommentId;\n}\n\nasync function run() {\n  try {\n    const commentMessage = core.getInput('message');\n    const commentId = core.getInput('COMMENT_IDENTIFIER')\n      ? core.getInput('COMMENT_IDENTIFIER')\n      : DEFAULT_COMMENT_IDENTIFIER;\n    const githubToken = core.getInput('GITHUB_TOKEN');\n\n    const issue_id = core.getInput('ISSUE_ID')\n      ? core.getInput('ISSUE_ID')\n      : ctx.payload.pull_request.number;\n    const { owner, repo } = ctx.repo;\n\n    if (!issue_id) {\n      core.setFailed('Action must run on a Pull Request.');\n      return;\n    }\n\n    const octokit = new github(githubToken);\n\n    // Suffix comment with hidden value to check for updating later.\n    const commentIdSuffix = `\\n\\n\\n<hidden purpose=\"for-rewritable-pr-comment-action-use\" value=\"${commentId}\"></hidden>`;\n\n    // If comment already exists, get the comment ID.\n    const existingCommentId = await checkForExistingComment(\n      octokit,\n      repo,\n      owner,\n      issue_id,\n      commentIdSuffix,\n    );\n\n    const commentBody = commentMessage + commentIdSuffix;\n    let comment = undefined;\n    if (existingCommentId) {\n      comment = await octokit.issues.updateComment({\n        repo,\n        owner,\n        comment_id: existingCommentId,\n        body: commentBody,\n      });\n    } else {\n      comment = await octokit.issues.createComment({\n        repo,\n        owner,\n        issue_number: issue_id,\n        body: commentBody,\n      });\n    }\n\n    core.setOutput('comment-id', comment.data.id);\n  } catch (e) {\n    core.setFailed(e.message);\n  }\n}\n\nrun().then();\n"],"names":[],"sourceRoot":""}